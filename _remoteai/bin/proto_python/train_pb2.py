# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: train.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import service as _service
from google.protobuf import service_reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='train.proto',
  package='train.train',
  syntax='proto3',
  serialized_pb=_b('\n\x0btrain.proto\x12\x0btrain.train\"\x0c\n\ntrain_none\"\x1c\n\x0c\x64\x65\x66\x61ult_data\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\t\"\x1b\n\x0bsample_data\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\t\"\x1e\n\x0estart_pvp_data\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\t\"\x1b\n\x0b\x61\x63tion_data\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\t\"\x18\n\x08pvp_data\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\t2\x95\x02\n\x0cTrainService\x12;\n\x05ready\x12\x19.train.train.default_data\x1a\x17.train.train.train_none\x12\x43\n\rrequestAction\x12\x19.train.train.default_data\x1a\x17.train.train.train_none\x12\x41\n\x0bonPVPFinish\x12\x19.train.train.default_data\x1a\x17.train.train.train_none\x12@\n\nonPVPStart\x12\x19.train.train.default_data\x1a\x17.train.train.train_none2\xd0\x01\n\x0bTrainClient\x12@\n\x08startPVP\x12\x1b.train.train.start_pvp_data\x1a\x17.train.train.train_none\x12\x45\n\x0fonRequestAction\x12\x19.train.train.default_data\x1a\x17.train.train.train_none\x12\x38\n\x04tick\x12\x17.train.train.train_none\x1a\x17.train.train.train_noneB\x03\x90\x01\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_TRAIN_NONE = _descriptor.Descriptor(
  name='train_none',
  full_name='train.train.train_none',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=28,
  serialized_end=40,
)


_DEFAULT_DATA = _descriptor.Descriptor(
  name='default_data',
  full_name='train.train.default_data',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='train.train.default_data.data', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=42,
  serialized_end=70,
)


_SAMPLE_DATA = _descriptor.Descriptor(
  name='sample_data',
  full_name='train.train.sample_data',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='train.train.sample_data.data', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=72,
  serialized_end=99,
)


_START_PVP_DATA = _descriptor.Descriptor(
  name='start_pvp_data',
  full_name='train.train.start_pvp_data',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='train.train.start_pvp_data.data', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=101,
  serialized_end=131,
)


_ACTION_DATA = _descriptor.Descriptor(
  name='action_data',
  full_name='train.train.action_data',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='train.train.action_data.data', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=133,
  serialized_end=160,
)


_PVP_DATA = _descriptor.Descriptor(
  name='pvp_data',
  full_name='train.train.pvp_data',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='train.train.pvp_data.data', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=162,
  serialized_end=186,
)

DESCRIPTOR.message_types_by_name['train_none'] = _TRAIN_NONE
DESCRIPTOR.message_types_by_name['default_data'] = _DEFAULT_DATA
DESCRIPTOR.message_types_by_name['sample_data'] = _SAMPLE_DATA
DESCRIPTOR.message_types_by_name['start_pvp_data'] = _START_PVP_DATA
DESCRIPTOR.message_types_by_name['action_data'] = _ACTION_DATA
DESCRIPTOR.message_types_by_name['pvp_data'] = _PVP_DATA

train_none = _reflection.GeneratedProtocolMessageType('train_none', (_message.Message,), dict(
  DESCRIPTOR = _TRAIN_NONE,
  __module__ = 'train_pb2'
  # @@protoc_insertion_point(class_scope:train.train.train_none)
  ))
_sym_db.RegisterMessage(train_none)

default_data = _reflection.GeneratedProtocolMessageType('default_data', (_message.Message,), dict(
  DESCRIPTOR = _DEFAULT_DATA,
  __module__ = 'train_pb2'
  # @@protoc_insertion_point(class_scope:train.train.default_data)
  ))
_sym_db.RegisterMessage(default_data)

sample_data = _reflection.GeneratedProtocolMessageType('sample_data', (_message.Message,), dict(
  DESCRIPTOR = _SAMPLE_DATA,
  __module__ = 'train_pb2'
  # @@protoc_insertion_point(class_scope:train.train.sample_data)
  ))
_sym_db.RegisterMessage(sample_data)

start_pvp_data = _reflection.GeneratedProtocolMessageType('start_pvp_data', (_message.Message,), dict(
  DESCRIPTOR = _START_PVP_DATA,
  __module__ = 'train_pb2'
  # @@protoc_insertion_point(class_scope:train.train.start_pvp_data)
  ))
_sym_db.RegisterMessage(start_pvp_data)

action_data = _reflection.GeneratedProtocolMessageType('action_data', (_message.Message,), dict(
  DESCRIPTOR = _ACTION_DATA,
  __module__ = 'train_pb2'
  # @@protoc_insertion_point(class_scope:train.train.action_data)
  ))
_sym_db.RegisterMessage(action_data)

pvp_data = _reflection.GeneratedProtocolMessageType('pvp_data', (_message.Message,), dict(
  DESCRIPTOR = _PVP_DATA,
  __module__ = 'train_pb2'
  # @@protoc_insertion_point(class_scope:train.train.pvp_data)
  ))
_sym_db.RegisterMessage(pvp_data)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\220\001\001'))

_TRAINSERVICE = _descriptor.ServiceDescriptor(
  name='TrainService',
  full_name='train.train.TrainService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=189,
  serialized_end=466,
  methods=[
  _descriptor.MethodDescriptor(
    name='ready',
    full_name='train.train.TrainService.ready',
    index=0,
    containing_service=None,
    input_type=_DEFAULT_DATA,
    output_type=_TRAIN_NONE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='requestAction',
    full_name='train.train.TrainService.requestAction',
    index=1,
    containing_service=None,
    input_type=_DEFAULT_DATA,
    output_type=_TRAIN_NONE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='onPVPFinish',
    full_name='train.train.TrainService.onPVPFinish',
    index=2,
    containing_service=None,
    input_type=_DEFAULT_DATA,
    output_type=_TRAIN_NONE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='onPVPStart',
    full_name='train.train.TrainService.onPVPStart',
    index=3,
    containing_service=None,
    input_type=_DEFAULT_DATA,
    output_type=_TRAIN_NONE,
    options=None,
  ),
])

TrainService = service_reflection.GeneratedServiceType('TrainService', (_service.Service,), dict(
  DESCRIPTOR = _TRAINSERVICE,
  __module__ = 'train_pb2'
  ))

TrainService_Stub = service_reflection.GeneratedServiceStubType('TrainService_Stub', (TrainService,), dict(
  DESCRIPTOR = _TRAINSERVICE,
  __module__ = 'train_pb2'
  ))



_TRAINCLIENT = _descriptor.ServiceDescriptor(
  name='TrainClient',
  full_name='train.train.TrainClient',
  file=DESCRIPTOR,
  index=1,
  options=None,
  serialized_start=469,
  serialized_end=677,
  methods=[
  _descriptor.MethodDescriptor(
    name='startPVP',
    full_name='train.train.TrainClient.startPVP',
    index=0,
    containing_service=None,
    input_type=_START_PVP_DATA,
    output_type=_TRAIN_NONE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='onRequestAction',
    full_name='train.train.TrainClient.onRequestAction',
    index=1,
    containing_service=None,
    input_type=_DEFAULT_DATA,
    output_type=_TRAIN_NONE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='tick',
    full_name='train.train.TrainClient.tick',
    index=2,
    containing_service=None,
    input_type=_TRAIN_NONE,
    output_type=_TRAIN_NONE,
    options=None,
  ),
])

TrainClient = service_reflection.GeneratedServiceType('TrainClient', (_service.Service,), dict(
  DESCRIPTOR = _TRAINCLIENT,
  __module__ = 'train_pb2'
  ))

TrainClient_Stub = service_reflection.GeneratedServiceStubType('TrainClient_Stub', (TrainClient,), dict(
  DESCRIPTOR = _TRAINCLIENT,
  __module__ = 'train_pb2'
  ))


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class TrainServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.ready = channel.unary_unary(
          '/train.train.TrainService/ready',
          request_serializer=default_data.SerializeToString,
          response_deserializer=train_none.FromString,
          )
      self.requestAction = channel.unary_unary(
          '/train.train.TrainService/requestAction',
          request_serializer=default_data.SerializeToString,
          response_deserializer=train_none.FromString,
          )
      self.onPVPFinish = channel.unary_unary(
          '/train.train.TrainService/onPVPFinish',
          request_serializer=default_data.SerializeToString,
          response_deserializer=train_none.FromString,
          )
      self.onPVPStart = channel.unary_unary(
          '/train.train.TrainService/onPVPStart',
          request_serializer=default_data.SerializeToString,
          response_deserializer=train_none.FromString,
          )


  class TrainServiceServicer(object):

    def ready(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def requestAction(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def onPVPFinish(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def onPVPStart(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_TrainServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ready': grpc.unary_unary_rpc_method_handler(
            servicer.ready,
            request_deserializer=default_data.FromString,
            response_serializer=train_none.SerializeToString,
        ),
        'requestAction': grpc.unary_unary_rpc_method_handler(
            servicer.requestAction,
            request_deserializer=default_data.FromString,
            response_serializer=train_none.SerializeToString,
        ),
        'onPVPFinish': grpc.unary_unary_rpc_method_handler(
            servicer.onPVPFinish,
            request_deserializer=default_data.FromString,
            response_serializer=train_none.SerializeToString,
        ),
        'onPVPStart': grpc.unary_unary_rpc_method_handler(
            servicer.onPVPStart,
            request_deserializer=default_data.FromString,
            response_serializer=train_none.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'train.train.TrainService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class TrainClientStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.startPVP = channel.unary_unary(
          '/train.train.TrainClient/startPVP',
          request_serializer=start_pvp_data.SerializeToString,
          response_deserializer=train_none.FromString,
          )
      self.onRequestAction = channel.unary_unary(
          '/train.train.TrainClient/onRequestAction',
          request_serializer=default_data.SerializeToString,
          response_deserializer=train_none.FromString,
          )
      self.tick = channel.unary_unary(
          '/train.train.TrainClient/tick',
          request_serializer=train_none.SerializeToString,
          response_deserializer=train_none.FromString,
          )


  class TrainClientServicer(object):

    def startPVP(self, request, context):
      """rpc addSample     (default_data)   returns (train_none);
      rpc delSample     (default_data)   returns (train_none);
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def onRequestAction(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def tick(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_TrainClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'startPVP': grpc.unary_unary_rpc_method_handler(
            servicer.startPVP,
            request_deserializer=start_pvp_data.FromString,
            response_serializer=train_none.SerializeToString,
        ),
        'onRequestAction': grpc.unary_unary_rpc_method_handler(
            servicer.onRequestAction,
            request_deserializer=default_data.FromString,
            response_serializer=train_none.SerializeToString,
        ),
        'tick': grpc.unary_unary_rpc_method_handler(
            servicer.tick,
            request_deserializer=train_none.FromString,
            response_serializer=train_none.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'train.train.TrainClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaTrainServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def ready(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def requestAction(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def onPVPFinish(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def onPVPStart(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaTrainServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def ready(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    ready.future = None
    def requestAction(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    requestAction.future = None
    def onPVPFinish(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    onPVPFinish.future = None
    def onPVPStart(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    onPVPStart.future = None


  def beta_create_TrainService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('train.train.TrainService', 'onPVPFinish'): default_data.FromString,
      ('train.train.TrainService', 'onPVPStart'): default_data.FromString,
      ('train.train.TrainService', 'ready'): default_data.FromString,
      ('train.train.TrainService', 'requestAction'): default_data.FromString,
    }
    response_serializers = {
      ('train.train.TrainService', 'onPVPFinish'): train_none.SerializeToString,
      ('train.train.TrainService', 'onPVPStart'): train_none.SerializeToString,
      ('train.train.TrainService', 'ready'): train_none.SerializeToString,
      ('train.train.TrainService', 'requestAction'): train_none.SerializeToString,
    }
    method_implementations = {
      ('train.train.TrainService', 'onPVPFinish'): face_utilities.unary_unary_inline(servicer.onPVPFinish),
      ('train.train.TrainService', 'onPVPStart'): face_utilities.unary_unary_inline(servicer.onPVPStart),
      ('train.train.TrainService', 'ready'): face_utilities.unary_unary_inline(servicer.ready),
      ('train.train.TrainService', 'requestAction'): face_utilities.unary_unary_inline(servicer.requestAction),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_TrainService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('train.train.TrainService', 'onPVPFinish'): default_data.SerializeToString,
      ('train.train.TrainService', 'onPVPStart'): default_data.SerializeToString,
      ('train.train.TrainService', 'ready'): default_data.SerializeToString,
      ('train.train.TrainService', 'requestAction'): default_data.SerializeToString,
    }
    response_deserializers = {
      ('train.train.TrainService', 'onPVPFinish'): train_none.FromString,
      ('train.train.TrainService', 'onPVPStart'): train_none.FromString,
      ('train.train.TrainService', 'ready'): train_none.FromString,
      ('train.train.TrainService', 'requestAction'): train_none.FromString,
    }
    cardinalities = {
      'onPVPFinish': cardinality.Cardinality.UNARY_UNARY,
      'onPVPStart': cardinality.Cardinality.UNARY_UNARY,
      'ready': cardinality.Cardinality.UNARY_UNARY,
      'requestAction': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'train.train.TrainService', cardinalities, options=stub_options)


  class BetaTrainClientServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def startPVP(self, request, context):
      """rpc addSample     (default_data)   returns (train_none);
      rpc delSample     (default_data)   returns (train_none);
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def onRequestAction(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def tick(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaTrainClientStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def startPVP(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """rpc addSample     (default_data)   returns (train_none);
      rpc delSample     (default_data)   returns (train_none);
      """
      raise NotImplementedError()
    startPVP.future = None
    def onRequestAction(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    onRequestAction.future = None
    def tick(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    tick.future = None


  def beta_create_TrainClient_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('train.train.TrainClient', 'onRequestAction'): default_data.FromString,
      ('train.train.TrainClient', 'startPVP'): start_pvp_data.FromString,
      ('train.train.TrainClient', 'tick'): train_none.FromString,
    }
    response_serializers = {
      ('train.train.TrainClient', 'onRequestAction'): train_none.SerializeToString,
      ('train.train.TrainClient', 'startPVP'): train_none.SerializeToString,
      ('train.train.TrainClient', 'tick'): train_none.SerializeToString,
    }
    method_implementations = {
      ('train.train.TrainClient', 'onRequestAction'): face_utilities.unary_unary_inline(servicer.onRequestAction),
      ('train.train.TrainClient', 'startPVP'): face_utilities.unary_unary_inline(servicer.startPVP),
      ('train.train.TrainClient', 'tick'): face_utilities.unary_unary_inline(servicer.tick),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_TrainClient_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('train.train.TrainClient', 'onRequestAction'): default_data.SerializeToString,
      ('train.train.TrainClient', 'startPVP'): start_pvp_data.SerializeToString,
      ('train.train.TrainClient', 'tick'): train_none.SerializeToString,
    }
    response_deserializers = {
      ('train.train.TrainClient', 'onRequestAction'): train_none.FromString,
      ('train.train.TrainClient', 'startPVP'): train_none.FromString,
      ('train.train.TrainClient', 'tick'): train_none.FromString,
    }
    cardinalities = {
      'onRequestAction': cardinality.Cardinality.UNARY_UNARY,
      'startPVP': cardinality.Cardinality.UNARY_UNARY,
      'tick': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'train.train.TrainClient', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
